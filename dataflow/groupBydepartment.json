{
	"name": "groupBydepartment",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "employeeTXT",
						"type": "DatasetReference"
					},
					"name": "employeeGroups"
				},
				{
					"dataset": {
						"referenceName": "dep",
						"type": "DatasetReference"
					},
					"name": "departmentTable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "departmentsGroups",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "groupById",
					"description": "count(*) group by id"
				},
				{
					"name": "joinToDepartment"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as string,",
				"          name as string,",
				"          country as string,",
				"          department as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> employeeGroups",
				"source(output(",
				"          depid as string,",
				"          depname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> departmentTable",
				"employeeGroups aggregate(groupBy(department),",
				"     TotalEmp = count(department),",
				"     partitionBy('hash', 1)) ~> groupById",
				"groupById, departmentTable join(department == depid,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     partitionBy('hash', 1),",
				"     broadcast: 'auto')~> joinToDepartment",
				"joinToDepartment sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['depGroups'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          department,",
				"          TotalEmp,",
				"          depname",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}